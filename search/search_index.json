{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Django Google Integrations Documentation \u00b6 Version: \u201c0.0.1\u201d Django Google Integrations is a package that allows integrating Google OAuth into your Django application. It is build as a thin wrapper around the google-auth-oauthlib . You can view the full documentation at https://PrimedigitalGlobal.github.io/django-google-integrations/ Features \u00b6 Provides following APIs: Authorization URL API: It generates google authorization-url which redirects user to Google\u2019s Authorization Server to request consent from resource owner. Authorize Web API: Exchange authorization code for access token. Talk to resource server with access token and fetch user\u2019s profile information. Authorize IOS Token API: Verifies an ID Token issued by Google\u2019s OAuth 2.0 authorization server. Fetch user details from decoded token. API \u00b6 Overview Endpoints NOTE: This documentation changes frequently, checkout the changelog for detailed breaking changes and features added. Write your documentation using Markdown in docs/ folder. Need help? Read mkdocs documentation .","title":"Home"},{"location":"#django-google-integrations-documentation","text":"Version: \u201c0.0.1\u201d Django Google Integrations is a package that allows integrating Google OAuth into your Django application. It is build as a thin wrapper around the google-auth-oauthlib . You can view the full documentation at https://PrimedigitalGlobal.github.io/django-google-integrations/","title":"Django Google Integrations Documentation"},{"location":"#features","text":"Provides following APIs: Authorization URL API: It generates google authorization-url which redirects user to Google\u2019s Authorization Server to request consent from resource owner. Authorize Web API: Exchange authorization code for access token. Talk to resource server with access token and fetch user\u2019s profile information. Authorize IOS Token API: Verifies an ID Token issued by Google\u2019s OAuth 2.0 authorization server. Fetch user details from decoded token.","title":"Features"},{"location":"#api","text":"Overview Endpoints NOTE: This documentation changes frequently, checkout the changelog for detailed breaking changes and features added. Write your documentation using Markdown in docs/ folder. Need help? Read mkdocs documentation .","title":"API"},{"location":"release_notes/","text":"","title":"Release Notes"},{"location":"api/changelog/","text":"0.0.1 (2022-04-11) \u00b6 Initial Release","title":"0.0.1 (2022-04-11)"},{"location":"api/changelog/#001-2022-04-11","text":"Initial Release","title":"0.0.1 (2022-04-11)"},{"location":"api/endpoints/","text":"Google OAuth Get Authorization URL Get user information Authorize iOS Token Google OAuth \u00b6 Get Authorization URL \u00b6 Authorization URL is used to redirect user to Google\u2019s Authorization Server to request consent from resource owner. GET {BASE_URL}/auth-url Response status: 200 OK { \"authorization_url\" : \"https://accounts.google.com/o/oauth2/auth?response_type=code&client_id=<client_id>&redirect_uri=<redirect_uri>&scope=openid+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.profile&state=<state>&code_challenge=uarq2qP_100OjqAt-vFcFsNQbrz3TRxgxgy2j2Jcta4&code_challenge_method=S256&access_type=offline&include_granted_scopes=true\" } Get user information \u00b6 Exchange authorization code for access token and talk to resource server with access token and fetch user\u2019s profile information. Note: After successful authorization, the callback will have the authorization code(i.e code) and state. We can fetch state and code from redirect URI query parameters and pass those values to authorize api. POST {BASE_URL}/authorize Request body: { \"state\" : \"NFvYBYlgIfp91JxPOmGuG1N4ACElVe\" , \"auth_code\" : \"4/0AX4XfWjwvCFOwNKHaasZ9dgSX4WM8QPwW1xU4miWm_dNxRpYdgS_FHCpOOTG7SKN7Aw-7Q\" } Response status: 200 OK Response needs to be defined by overriding the GoogleResponseHandler class Authorize iOS Token \u00b6 Verifies an ID Token issued by Google\u2019s OAuth 2.0 authorization server and fetch user details from decoded token. POST {BASE_URL}/authorize/ios { \"token\" : \"xyz123\" } Response \"Response needs to be defined by overriding the GoogleResponseHandler class\"\"","title":"REST Endpoints"},{"location":"api/endpoints/#google-oauth","text":"","title":"Google OAuth"},{"location":"api/endpoints/#get-authorization-url","text":"Authorization URL is used to redirect user to Google\u2019s Authorization Server to request consent from resource owner. GET {BASE_URL}/auth-url Response status: 200 OK { \"authorization_url\" : \"https://accounts.google.com/o/oauth2/auth?response_type=code&client_id=<client_id>&redirect_uri=<redirect_uri>&scope=openid+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.profile&state=<state>&code_challenge=uarq2qP_100OjqAt-vFcFsNQbrz3TRxgxgy2j2Jcta4&code_challenge_method=S256&access_type=offline&include_granted_scopes=true\" }","title":"Get Authorization URL"},{"location":"api/endpoints/#get-user-information","text":"Exchange authorization code for access token and talk to resource server with access token and fetch user\u2019s profile information. Note: After successful authorization, the callback will have the authorization code(i.e code) and state. We can fetch state and code from redirect URI query parameters and pass those values to authorize api. POST {BASE_URL}/authorize Request body: { \"state\" : \"NFvYBYlgIfp91JxPOmGuG1N4ACElVe\" , \"auth_code\" : \"4/0AX4XfWjwvCFOwNKHaasZ9dgSX4WM8QPwW1xU4miWm_dNxRpYdgS_FHCpOOTG7SKN7Aw-7Q\" } Response status: 200 OK Response needs to be defined by overriding the GoogleResponseHandler class","title":"Get user information"},{"location":"api/endpoints/#authorize-ios-token","text":"Verifies an ID Token issued by Google\u2019s OAuth 2.0 authorization server and fetch user details from decoded token. POST {BASE_URL}/authorize/ios { \"token\" : \"xyz123\" } Response \"Response needs to be defined by overriding the GoogleResponseHandler class\"\"","title":"Authorize iOS Token"},{"location":"api/overview/","text":"Django Google Integrations \u00b6 It provides three endpoints: {base-url}/auth-url: To generate Google Authorization URL. {base-url}/authorize: To fetch user data from Google server. {base-url}/ios/authorize: Verifies an ID Token issued by Google\u2019s OAuth 2.0 authorization server and fetch user details from decoded token. Dependencies \u00b6 Python >= 3.6 Django >= 2.2.17 djangorestframework >= 3.10.2 google-api-python-client >= 2.9.0 google-auth-httplib2 >= 0.1.0 google-auth-oauthlib >= 0.4.1 Setup \u00b6 You can install the library directly from pypi using pip: $ pip install django-google-integrations Edit your settings.py file: INSTALLED_APPS = ( ... \"django_google_integrations\" ) # Django Google Integrations Config GOOGLE_CONFIG = { \"CLIENT_CONFIG_JSON\": \"[Google Client Config Json]\", \"CLIENT_ID\": \"[Google Client ID]\", \"CLIENT_SECRET\": \"[Google Client Secret]\", \"SERVICE_ACCOUNT_SCOPES\": [ \"openid\", \"https://www.googleapis.com/auth/userinfo.email\", \"https://www.googleapis.com/auth/userinfo.profile\", ], \"REDIRECT_URI\": \"http://localhost:3000/google/auth/callback\", \"RESPONSE_HANDLER_CLASS\": \"example.testapp.google_response_handler.GoogleSigninResponseHandler\", } Create Response Handler Class and update path in GOOGLE_CONFIG from django_google_integrations.services import GoogleResponseHandler class GoogleSigninResponseHandler(GoogleResponseHandler): def handle_fetch_or_create_user(self, flow, google_user_data): email = google_user_data.get(\"email\", None) user = get_user_by_email(email) is_created = False if not user: user_dict = { \"first_name\": google_user_data.get(\"given_name\", \"\"), \"last_name\": google_user_data.get(\"family_name\", \"\"), \"password\": None, } user = create_user_account(email, **user_dict) is_created = True extra_context = {\"is_created\": is_created} return user, extra_context def generate_response_json(self, user, extra_context): response = AuthUserSerializer(user) return response.data NOTE: AuthUserSerializer used in above ref. could be created as per app\u2019s functionality and contain fields which needs to be sent in response of authorization. Following service methods are used in above code ref. which could be created as per app\u2019s functionality: get_user_by_email create_user_account Update URLs from django_google_integrations.apis import GoogleAuthViewSet default_router = routers.DefaultRouter(trailing_slash=False) default_router.register(\"auth/google\", GoogleAuthViewSet, basename=\"google-auth\")","title":"Overview & Usages"},{"location":"api/overview/#django-google-integrations","text":"It provides three endpoints: {base-url}/auth-url: To generate Google Authorization URL. {base-url}/authorize: To fetch user data from Google server. {base-url}/ios/authorize: Verifies an ID Token issued by Google\u2019s OAuth 2.0 authorization server and fetch user details from decoded token.","title":"Django Google Integrations"},{"location":"api/overview/#dependencies","text":"Python >= 3.6 Django >= 2.2.17 djangorestframework >= 3.10.2 google-api-python-client >= 2.9.0 google-auth-httplib2 >= 0.1.0 google-auth-oauthlib >= 0.4.1","title":"Dependencies"},{"location":"api/overview/#setup","text":"You can install the library directly from pypi using pip: $ pip install django-google-integrations Edit your settings.py file: INSTALLED_APPS = ( ... \"django_google_integrations\" ) # Django Google Integrations Config GOOGLE_CONFIG = { \"CLIENT_CONFIG_JSON\": \"[Google Client Config Json]\", \"CLIENT_ID\": \"[Google Client ID]\", \"CLIENT_SECRET\": \"[Google Client Secret]\", \"SERVICE_ACCOUNT_SCOPES\": [ \"openid\", \"https://www.googleapis.com/auth/userinfo.email\", \"https://www.googleapis.com/auth/userinfo.profile\", ], \"REDIRECT_URI\": \"http://localhost:3000/google/auth/callback\", \"RESPONSE_HANDLER_CLASS\": \"example.testapp.google_response_handler.GoogleSigninResponseHandler\", } Create Response Handler Class and update path in GOOGLE_CONFIG from django_google_integrations.services import GoogleResponseHandler class GoogleSigninResponseHandler(GoogleResponseHandler): def handle_fetch_or_create_user(self, flow, google_user_data): email = google_user_data.get(\"email\", None) user = get_user_by_email(email) is_created = False if not user: user_dict = { \"first_name\": google_user_data.get(\"given_name\", \"\"), \"last_name\": google_user_data.get(\"family_name\", \"\"), \"password\": None, } user = create_user_account(email, **user_dict) is_created = True extra_context = {\"is_created\": is_created} return user, extra_context def generate_response_json(self, user, extra_context): response = AuthUserSerializer(user) return response.data NOTE: AuthUserSerializer used in above ref. could be created as per app\u2019s functionality and contain fields which needs to be sent in response of authorization. Following service methods are used in above code ref. which could be created as per app\u2019s functionality: get_user_by_email create_user_account Update URLs from django_google_integrations.apis import GoogleAuthViewSet default_router = routers.DefaultRouter(trailing_slash=False) default_router.register(\"auth/google\", GoogleAuthViewSet, basename=\"google-auth\")","title":"Setup"},{"location":"tutorial/quickstart/","text":"Quickstart \u00b6 We will create a test application implementing Google OAuth using django-google-integrations Project setup \u00b6 # Create the project directory mkdir example cd example # Create a virtual environment to isolate our package dependencies locally python3 -m venv env source env/bin/activate # On Windows use `env\\Scripts\\activate` # Install Django and Django REST framework into the virtual environment pip install django pip install djangorestframework pip install django-google-integrations # Set up a new project with a single application django-admin startproject example . # Note the trailing '.' character cd example django-admin startapp testapp cd .. Add django_google_integrations app in your INSTALLED_APPS INSTALLED_APPS = [ ...... \"rest_framework\", \"django_google_integrations\", \"testapp\", ] Define your urls.py default_router = routers.DefaultRouter(trailing_slash=False) default_router.register(\"api/auth/google\", GoogleAuthViewSet, basename=\"google-auth\") Create your models to store user information # models.py class User(Model): id = models.UUIDField(primary_key=True, editable=False, default=uuid.uuid4) first_name = models.CharField(max_length=120, blank=True) last_name = models.CharField(max_length=120, blank=True) google_id = models.CharField(max_length=120, blank=True, null=True) email = models.EmailField(unique=True, db_index=True) date_joined = models.DateTimeField(default=timezone.now) Create Serializers to handle response # serializers.py from rest_framework import serializers class AuthUserSerializer(serializers.ModelSerializer): class Meta: fields = [ \"id\", \"first_name\", \"last_name\", \"email\", \"google_id\", \"date_joined\" ] Create google_response_handler.py file in your testapp and override GoogleResponseHandler class to handle incoming response from google from example.testapp.serializers import AuthUserSerializer from django_google_integrations.services import GoogleResponseHandler from example.testapp.services import create_user_account, get_user_by_email class GoogleSigninResponseHandler(GoogleResponseHandler): def handle_fetch_or_create_user(self, flow, google_user_data): email = google_user_data.get(\"email\", None) user = get_user_by_email(email) is_created = False if not user: user_dict = { \"first_name\": google_user_data.get(\"given_name\", \"\"), \"last_name\": google_user_data.get(\"family_name\", \"\"), \"password\": None, } user = create_user_account(email, **user_dict) is_created = True extra_context = {\"is_created\": is_created} return user, extra_context def generate_response_json(self, user, extra_context): response = AuthUserSerializer(user) return response.data The project layout should look like: $ pwd <some path>/example $ find . . ./testapp ./testapp/migrations ./testapp/migrations/__init__.py ./testapp/migrations/0001_initial.py ./testapp/models.py ./testapp/serializers.py ./testapp/__init__.py ./testapp/apps.py ./testapp/admin.py ./testapp/google_response_handler.py ./example ./example/__init__.py ./example/settings.py ./example/urls.py ./example/wsgi.py ./manage.py Define Google Config in settings.py file, you can generate these values from google cloud console # django-google-integrations config GOOGLE_CONFIG = { \"CLIENT_CONFIG_JSON\": \"[Google Client Config Json]\", \"CLIENT_ID\": \"[Google Client ID]\", \"CLIENT_SECRET\": \"[Google Client Secret]\", \"SERVICE_ACCOUNT_SCOPES\": [ \"openid\", \"https://www.googleapis.com/auth/userinfo.email\", \"https://www.googleapis.com/auth/userinfo.profile\", ], \"REDIRECT_URI\": \"http://localhost:3000/google/auth/callback\", \"RESPONSE_HANDLER_CLASS\": \"example.testapp.google_response_handler.GoogleSigninResponseHandler\", } Testing app \u00b6 Run following command to create your migration file python manage.py makemigrations python manage.py migrate Run django server python manage.py runserver Now you can access your urls from shell using httpie or Postman Generate Authorization URL \u00b6 http GET localhost:8000/api/auth/google/auth-url HTTP/1.1 200 OK Allow: GET, HEAD, OPTIONS Content-Language: en Content-Length: 537 Content-Type: application/json; charset=utf-8 Request_id: 94494c0acc584dc3b20cbd29763fd341 Vary: Accept, Accept-Language, Cookie, Origin X-Content-Type-Options: nosniff X-Frame-Options: DENY X-XSS-Protection: 1; mode=block { \"authorization_url\": \"https://accounts.google.com/o/oauth2/auth?response_type=code&client_id=243243243243-o91vlam4808du0454jsal4g.apps.googleusercontent.com&redirect_uri=http%3A%2F%2Flocalhost%3A3000%2Fgoogle%2Fauth%2Fcallback&scope=openid+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.profile&state=TYBKHoujnjkho3245lnl&code_challenge=Z4kfoAWat4XjpVpajEMKV0BWhV-63QFpK0v8sPcbH6w&code_challenge_method=S256&access_type=offline&include_granted_scopes=true\" } authorization_url will redirect to google signin page After successful login you will be redirected to your redirect url with some query parameters http://localhost:3000/google/auth/callback?state={state}&code={auth_code}&scope={scope} Authorize Tokens \u00b6 POST /api/auth/google/authorize { \"state\":\"NFvYBYlgIfp91JxPOmGuG1N4ACElVe\", \"auth_code\":\"4/0AX4XfWjwvCFOwNKHaasZ9dgSX4WM8QPwW1xU4miWm_dNxRpYdgS_FHCpOOTG7SKN7Aw-7Q\" } Response Response can be generated by overriding generate_response_json method of GoogleResponseHandler class def generate_response_json(self, user, extra_context): response = AuthUserSerializer(user) return response.data","title":"Quickstart"},{"location":"tutorial/quickstart/#quickstart","text":"We will create a test application implementing Google OAuth using django-google-integrations","title":"Quickstart"},{"location":"tutorial/quickstart/#project-setup","text":"# Create the project directory mkdir example cd example # Create a virtual environment to isolate our package dependencies locally python3 -m venv env source env/bin/activate # On Windows use `env\\Scripts\\activate` # Install Django and Django REST framework into the virtual environment pip install django pip install djangorestframework pip install django-google-integrations # Set up a new project with a single application django-admin startproject example . # Note the trailing '.' character cd example django-admin startapp testapp cd .. Add django_google_integrations app in your INSTALLED_APPS INSTALLED_APPS = [ ...... \"rest_framework\", \"django_google_integrations\", \"testapp\", ] Define your urls.py default_router = routers.DefaultRouter(trailing_slash=False) default_router.register(\"api/auth/google\", GoogleAuthViewSet, basename=\"google-auth\") Create your models to store user information # models.py class User(Model): id = models.UUIDField(primary_key=True, editable=False, default=uuid.uuid4) first_name = models.CharField(max_length=120, blank=True) last_name = models.CharField(max_length=120, blank=True) google_id = models.CharField(max_length=120, blank=True, null=True) email = models.EmailField(unique=True, db_index=True) date_joined = models.DateTimeField(default=timezone.now) Create Serializers to handle response # serializers.py from rest_framework import serializers class AuthUserSerializer(serializers.ModelSerializer): class Meta: fields = [ \"id\", \"first_name\", \"last_name\", \"email\", \"google_id\", \"date_joined\" ] Create google_response_handler.py file in your testapp and override GoogleResponseHandler class to handle incoming response from google from example.testapp.serializers import AuthUserSerializer from django_google_integrations.services import GoogleResponseHandler from example.testapp.services import create_user_account, get_user_by_email class GoogleSigninResponseHandler(GoogleResponseHandler): def handle_fetch_or_create_user(self, flow, google_user_data): email = google_user_data.get(\"email\", None) user = get_user_by_email(email) is_created = False if not user: user_dict = { \"first_name\": google_user_data.get(\"given_name\", \"\"), \"last_name\": google_user_data.get(\"family_name\", \"\"), \"password\": None, } user = create_user_account(email, **user_dict) is_created = True extra_context = {\"is_created\": is_created} return user, extra_context def generate_response_json(self, user, extra_context): response = AuthUserSerializer(user) return response.data The project layout should look like: $ pwd <some path>/example $ find . . ./testapp ./testapp/migrations ./testapp/migrations/__init__.py ./testapp/migrations/0001_initial.py ./testapp/models.py ./testapp/serializers.py ./testapp/__init__.py ./testapp/apps.py ./testapp/admin.py ./testapp/google_response_handler.py ./example ./example/__init__.py ./example/settings.py ./example/urls.py ./example/wsgi.py ./manage.py Define Google Config in settings.py file, you can generate these values from google cloud console # django-google-integrations config GOOGLE_CONFIG = { \"CLIENT_CONFIG_JSON\": \"[Google Client Config Json]\", \"CLIENT_ID\": \"[Google Client ID]\", \"CLIENT_SECRET\": \"[Google Client Secret]\", \"SERVICE_ACCOUNT_SCOPES\": [ \"openid\", \"https://www.googleapis.com/auth/userinfo.email\", \"https://www.googleapis.com/auth/userinfo.profile\", ], \"REDIRECT_URI\": \"http://localhost:3000/google/auth/callback\", \"RESPONSE_HANDLER_CLASS\": \"example.testapp.google_response_handler.GoogleSigninResponseHandler\", }","title":"Project setup"},{"location":"tutorial/quickstart/#testing-app","text":"Run following command to create your migration file python manage.py makemigrations python manage.py migrate Run django server python manage.py runserver Now you can access your urls from shell using httpie or Postman","title":"Testing app"},{"location":"tutorial/quickstart/#generate-authorization-url","text":"http GET localhost:8000/api/auth/google/auth-url HTTP/1.1 200 OK Allow: GET, HEAD, OPTIONS Content-Language: en Content-Length: 537 Content-Type: application/json; charset=utf-8 Request_id: 94494c0acc584dc3b20cbd29763fd341 Vary: Accept, Accept-Language, Cookie, Origin X-Content-Type-Options: nosniff X-Frame-Options: DENY X-XSS-Protection: 1; mode=block { \"authorization_url\": \"https://accounts.google.com/o/oauth2/auth?response_type=code&client_id=243243243243-o91vlam4808du0454jsal4g.apps.googleusercontent.com&redirect_uri=http%3A%2F%2Flocalhost%3A3000%2Fgoogle%2Fauth%2Fcallback&scope=openid+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.profile&state=TYBKHoujnjkho3245lnl&code_challenge=Z4kfoAWat4XjpVpajEMKV0BWhV-63QFpK0v8sPcbH6w&code_challenge_method=S256&access_type=offline&include_granted_scopes=true\" } authorization_url will redirect to google signin page After successful login you will be redirected to your redirect url with some query parameters http://localhost:3000/google/auth/callback?state={state}&code={auth_code}&scope={scope}","title":"Generate Authorization URL"},{"location":"tutorial/quickstart/#authorize-tokens","text":"POST /api/auth/google/authorize { \"state\":\"NFvYBYlgIfp91JxPOmGuG1N4ACElVe\", \"auth_code\":\"4/0AX4XfWjwvCFOwNKHaasZ9dgSX4WM8QPwW1xU4miWm_dNxRpYdgS_FHCpOOTG7SKN7Aw-7Q\" } Response Response can be generated by overriding generate_response_json method of GoogleResponseHandler class def generate_response_json(self, user, extra_context): response = AuthUserSerializer(user) return response.data","title":"Authorize Tokens"}]}